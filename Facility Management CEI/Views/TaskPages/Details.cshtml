@using Facility_Management_CEI.Controllers
@using API.Enums
@model API.Models.Task

@{
    ViewData["Title"] = "Details";
    //var tasks = (List<API.Models.Task>)ViewBag.ListOfTasks;
}
<head>
    <title><english>Work Order Details</english><arabic class="d-none">تفاصيف المهمة</arabic></title>
    <script src="/Scripts/XBIM/xbim-viewer.debug.bundle.js"></script>
    <script src="/Scripts/XBIM/NavigationCube/xbim-navigation-cube-shaders.debug.js"></script>
    <script src="/Scripts/XBIM/NavigationCube/xbim-navigation-cube.debug.js"></script>
    <script src="/Scripts/XBIM/NavigationCube/xbim-navigation-cube-textures.debug.js"></script>
    <script src="/Scripts/XBIM/NavigationHome/xbim-navigation-home-textures.debug.js"></script>
    <script src="/Scripts/XBIM/NavigationHome/xbim-navigation-home.debug.js"></script>

    <style>

        .custom-control-input-light:focus~.custom-control-label-light::before {
          border-color: #7CB9E8 !important;
        }

        .custom-control-input-light:checked~.custom-control-label-light::before {
          border-color: #7CB9E8 !important;
          background-color: #7CB9E8 !important;
        }

        .custom-control-input-light:active~.custom-control-label-light::before {
          background-color: #7CB9E8 !important;
          border-color: #7CB9E8 !important;
        }

        .custom-control-input-light:focus:not(:checked)~.custom-control-label-light::before {
          border-color: #7CB9E8 !important;
        }

    </style>

</head>

<h1><english>Work Order Details</english><arabic class="d-none">تفاصيف المهمة</arabic></h1>

<div>
    
    <hr />
    <div class="row">
      <div class="col-5">
       <dl class="row">
        <dt class = "col-sm-2 text-center">
           
            <english>ID</english><arabic class="d-none">الكود</arabic>
        </dt>
        <dd class = "col-sm-10 text-center">
            @Html.DisplayFor(model => model.Id)
        </dd>
        <dt class = "col-sm-2 text-center">
            
            <english>Description</english><arabic class="d-none">التوصيف</arabic>
        </dt>
        <dd class = "col-sm-10 text-center">
            @Html.DisplayFor(model => model.Description)
        </dd>
        <dt class = "col-sm-2 text-center">
            
            <english>Status</english><arabic class="d-none">الحالة</arabic>
        </dt>
        <dd class = "col-sm-10 text-center">
            @Html.DisplayFor(model => model.Status)
        </dd>
        <dt class = "col-sm-2 text-center">
           
            <english>Type</english><arabic class="d-none">النوع</arabic>
        </dt>
        <dd class = "col-sm-10 text-center">
            @Html.DisplayFor(model => model.Type)
        </dd>
        <dt class = "col-sm-2 text-center">
            
            <english>Priority</english><arabic class="d-none">الأهمية</arabic>
        </dt>
        <dd class = "col-sm-10 text-center">
            @Html.DisplayFor(model => model.Priority)
        </dd>
         <dt class = "col-sm-2">
            
            <english>Created By</english><arabic class="d-none">أنشئت من قبل</arabic>
        </dt>
        <dd class = "col-sm-10 text-center">
            @Html.DisplayFor(model => model.CreatedBy.FirstName) @Html.DisplayFor(model => model.CreatedBy.LastName)
        </dd>
        <dt class = "col-sm-2 text-center">
           
            <english>Incident</english><arabic class="d-none">الحادثة</arabic>
        </dt>
        <dd class = "col-sm-10 text-center">
            @Html.DisplayFor(model => model.IncidentId)
        </dd>
        <dt class = "col-sm-2 text-center">
           
            <english>Assigned To</english><arabic class="d-none">عينت إلى</arabic>
        </dt>
        <dd class = "col-sm-10 text-center">
            @Html.DisplayFor(model => model.AssignedTo.FirstName) @Html.DisplayFor(model => model.AssignedTo.LastName)
        </dd>
        <dt class = "col-sm-2 text-center">
            
            <english>Assigned By</english><arabic class="d-none">عينت من قبل</arabic>
        </dt>
        <dd class = "col-sm-10 text-center">
            @Html.DisplayFor(model => model.AssignedBy.FirstName) @Html.DisplayFor(model => model.AssignedBy.LastName)
        </dd>
        <dt class = "col-sm-2 text-center">
            
            <english>Cost</english><arabic class="d-none">التكلفة</arabic>
        </dt>
        <dd class = "col-sm-10 text-center">
            @Html.DisplayFor(model => model.Cost)
        </dd>
        <dt class = "col-sm-2 text-center">
            
            <english>Fixing Time</english><arabic class="d-none">تاريخ الإصلاح</arabic>
        </dt>
        <dd class = "col-sm-10 text-center">
            @Html.DisplayFor(model => model.FixingTime)
        </dd>
        <dt class = "col-sm-2 text-center">
            
            <english>Comment</english><arabic class="d-none">الملاحظات</arabic>
        </dt>
        <dd class = "col-sm-10 text-center">
            @Html.DisplayFor(model => model.Comment)
        </dd>
    </dl>
        </div>
        <div class="col-7">

            <canvas id="viewer" height="650" style="width: 100%;
                                   object-fit: contain;"></canvas>
            <div class="shadow-lg p-3 mb-5 bg-white rounded" style="width: 150px; position: absolute; top: 8px;left: 20px;z-index:5"">
                <div class="font-weight-bold mb-2 text-center"><english>Toggle Highlights</english><arabic class="d-none">تبديل الإضاءات</arabic></div>
                @*<button class="btn btn-primary" onclick="ToggleHighLightItems()">Toggle Highlight Items</button>
                <button class="btn btn-primary" onclick="ToggleHighLightSevere()">Toggle Highlight Severe</button>
                <button class="btn btn-primary" onclick="ToggleHighLightHigh()">Toggle Highlight High</button>
                <button class="btn btn-primary" onclick="ToggleHighLightMedium()">Toggle Highlight Medium</button>
                <button class="btn btn-primary" onclick="ToggleHighLightLow()">Toggle Highlight Low</button>*@
                <div class="custom-control custom-switch mb-1">
                    <input type="checkbox" class="custom-control-input" id="Switch1" onchange="ToggleHighLightItems()" autocomplete="off">
                    <label class="custom-control-label" for="Switch1"><english>Items</english><arabic class="d-none">العناصر</arabic></label>
                </div>
                @*<div class="custom-control custom-switch mb-1">
                    <input type="checkbox" class="custom-control-input custom-control-input-light" id="Switch2" onchange="ToggleHighLightSevere()" checked>
                    <label class="custom-control-label custom-control-label-light" for="Switch2">Severe</label>
                </div>
                <div class="custom-control custom-switch mb-1">
                    <input type="checkbox" class="custom-control-input custom-control-input-light" id="Switch3" onchange="ToggleHighLightHigh()" checked>
                    <label class="custom-control-label custom-control-label-light" for="Switch3">High</label>
                </div>
                <div class="custom-control custom-switch mb-1">
                    <input type="checkbox" class="custom-control-input custom-control-input-light" id="Switch4" onchange="ToggleHighLightMedium()" checked>
                    <label class="custom-control-label custom-control-label-light" for="Switch4">Medium</label>
                </div>
                <div class="custom-control custom-switch mb-1">
                    <input type="checkbox" class="custom-control-input custom-control-input-light" id="Switch5" onchange="ToggleHighLightLow()" checked>
                    <label class="custom-control-label custom-control-label-light" for="Switch5">Low</label>
                </div>*@

            </div>
            <div style="position: absolute;
                        top: 8px;
                        right: 16px;
                        z-index:5" id="overlayDiv"></div>
            <script type="text/javascript">
                var viewer = new xViewer('viewer');
                //viewer.load('/data/SampleHouse.wexbim');
                viewer.load('@System.Configuration.ConfigurationManager.AppSettings["wexBIMFullPath"]');
                var navCube = new xNavigationCube();
                navCube.ratio = .1;
                viewer.addPlugin(navCube);
                viewer.start();
                viewer.defineStyle(0, [255,0,0,255])
                viewer.defineStyle(1, [255,160,16,255])
                viewer.defineStyle(2, [255,224,32,255])
                viewer.defineStyle(3, [0,255,0,255])
            </script>

            <script>
                    viewer.on('fps', function (fps) {
                        var overlayDiv = document.getElementById('overlayDiv');
                        if (overlayDiv) {
                            overlayDiv.innerHTML = "FPS: " + fps;
                        }
                    });
            </script>

            <div>
                <div class="text-center font-weight-bold m-2" id="productId"></div>
            </div>

            <div class="text-center">
    @*            <select id="cmbHide">
                    <option value="noAction">No action</option>
                    <option value="hideProduct">Hide product</option>
                    <option value="hideType">Hide type</option>
                    <option value="highlight">Highlight</option>
                </select>*@
                <button class="btn btn-primary waves-effect waves-light" onclick="viewer.zoomTo(@Model.Incident.AssetId)"><english>Zoom to Item</english><arabic class="d-none">عرض العنصر</arabic></button>
                <button class="btn btn-primary waves-effect waves-light" onclick="HideProduct()"><english>Hide Product</english><arabic class="d-none">إخفاء العنصر</arabic></button>
                <button class="btn btn-primary waves-effect waves-light" onclick="HideType()"><english>Hide Type</english><arabic class="d-none">إخفاء النوع</arabic></button>
                <button class="btn btn-primary waves-effect waves-light" onclick="Highlight()"><english>Select Product</english><arabic class="d-none">إختيار العنصر</arabic></button>
                <button class="btn btn-primary waves-effect waves-light" onclick="ResetAll()"><english>Reset All</english><arabic class="d-none">إعادة الضبط</arabic></button>
                <script type="text/javascript">

                    var timer = 0;
                    var highlightedId;
                    var option;
                
                    function HideProduct() {
                        option = "hideProduct";
                    }
                
                    function HideType() {
                        option = "hideType";
                    }

                    function Highlight() {
                        option = "highlight";
                    }

                    function ResetAll() {
                        if (viewer) {
                            viewer.resetStates();
                        }
                        var div = document.getElementById('productId');
                        if (div) {
                            div.innerHTML = "";
                        }
                    }
                
                    viewer.on('pick', function (args) {
                        var id = args.id;
                        viewer.setCameraTarget(id);
                        pickedId = id;
                        document.getElementById('hiddenId').value = id;

                        //var cmb = document.getElementById('cmbHide');
                        //var option = cmb.value;
                        switch (option) {
                            case 'hideProduct':
                                viewer.setState(xState.HIDDEN, [args.id]);
                                break;
                            case 'hideType':
                                var type = viewer.getProductType(args.id);
                                viewer.setState(xState.HIDDEN, type);
                                break;
                            case 'highlight':
                                //viewer.resetStates();
                                viewer.setState(xState.UNDEFINED, [highlightedId]);
                                viewer.setState(xState.HIGHLIGHTED, [args.id]);
                                var div = document.getElementById('productId');
                                if (div) {
                                    div.innerHTML = "Selected Asset Id = " + id;
                                }
                                highlightedId = id;
                                break;
                            default:
                                break;
                        }

                        var time = (new Date()).getTime();
                        if (time - timer < 200)
                            viewer.zoomTo(id);
                        timer = time;

                    });
                </script>
                <input name="hiddenId" type="hidden" id="hiddenId" />
            </div>

        </div>
    </div>
</div>
<div>
        @if (ViewContext.HttpContext.User.IsInAnyRoles("Supervisor", "Manager", "SystemAdmin", "Inspector"))
        {
            
            <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-primary"><english>Edit</english><arabic class="d-none">تعديل</arabic></a> 
        }
        <a asp-action="TaskList" class="btn btn-danger"><english>Back to List</english><arabic class="d-none">العودة إلى القائمة</arabic></a>
</div>


<script>

    function CreateCanvas() {
        var htmlContent = document.createElement('canvas');
        htmlContent.id = "viewer";
        htmlContent.width = "500";
        htmlContent.height = "300";
        document.getElementById("viewer").remove();
        var ParentElement = document.getElementById("content");
        ParentElement.insertBefore(htmlContent, ParentElement.firstChild);
        viewer = new xViewer('viewer');
        navCube = new xNavigationCube();
        navCube.ratio = .1;
        viewer.addPlugin(navCube);
        viewer.start();
        viewer.defineStyle(0, [255,0,0,255])
        viewer.defineStyle(1, [255,160,16,255])
        viewer.defineStyle(2, [255,224,32,255])
        viewer.defineStyle(3, [0,255,0,255])
    }

    var HighLightItemsBool = false;
    var animation;
    function ToggleHighLightItems() {
        if (HighLightItemsBool) {
            clearInterval(animation);
            viewer.resetStyles();
            HighLightItemsBool = false;
        }
        else {
            var animateBool = true;
            animation = setInterval(animateObjects, 500);
            function animateObjects() {
                if (animateBool) {
                    if("@Model.Priority" == "@Priority.Severe") {
                        viewer.setStyle(0, [@Model.Incident.AssetId]);
                    }
                    if("@Model.Priority" == "@Priority.High") {
                        viewer.setStyle(1, [@Model.Incident.AssetId]);
                    }
                    if ("@Model.Priority" == "@Priority.Medium") {
                        viewer.setStyle(2, [@Model.Incident.AssetId]);
                    }
                    if ("@Model.Priority" == "@Priority.Low") {
                        viewer.setStyle(3, [@Model.Incident.AssetId]);
                    }
                    animateBool = false;
                }
                else {
                    viewer.resetStyles()
                    animateBool = true;
                }
                HighLightItemsBool = true;
            }
        }  
    }
        
</Script>
                 
@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}    
@*
 <form asp-controller="Account" asp-action="Login" method="post">
 <div asp-validation-summary="ModelOnly" class="text-danger"></div>*@ @*we add this line after the form tag*@ 

@* <span asp-validation-for="Comment" class="text-danger"></span>*@ @*we add this line after the input tag*@ 
@*<english>Welcome Back !</english><arabic class="d-none">مرحبا !</arabic>*@
@*<english></english><arabic class="d-none"></arabic>*@