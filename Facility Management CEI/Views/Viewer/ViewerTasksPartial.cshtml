@using API.Models

<div class="shadow-sm p-3 mb-4 bg-white rounded tab-pane" id="tab-table2">
    <table id="ItemsTable" class="w-100 table table-striped table-hover">
        <thead>
            <tr>
                <th>
                    <english>Agent ID</english>
                    <arabic class="d-none">كود العامل</arabic>
                </th>
                <th>
                    <english>Work Order ID</english>
                    <arabic class="d-none">كود المهمة</arabic>
                </th>
                <th>
                    <english>Agent Name</english>
                    <arabic class="d-none">اسم العامل</arabic>
                </th>
                <th>
                    <english>Asset Name</english>
                    <arabic class="d-none">اسم العنصر</arabic>
                </th>
                <th>
                    <english> Details</english>
                    <arabic class="d-none">التفاصيل</arabic>
                </th>
                <th>
                    <english> Zoom To</english>
                    <arabic class="d-none">تكبير/تصغير</arabic>
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var task in ViewBag.Tasks)
            {
                <tr>
                    <th>@task.AssignedToId</th>
                    <th>@task.Id</th>
                    <th>@(((List<AppUser>)ViewBag.Agents).Where(x => x.Id == task.AssignedToId).Select(a => a.FirstName + " " + a.LastName).FirstOrDefault())</th>
                    <td>
                        @if(task.Incident.Asset != null)
                        {
                            @task.Incident.Asset.Name;
                        }
                        else
                        {
                            @task.Incident.Space.Name;
                        }
                    </td>
                    @*<td><button class="btn btn-info waves-effect waves-light">Details</button></td>*@
                    <td><a scope="col" asp-controller="TaskPages" asp-action="Details" asp-route-id="@task.Id" class="btn btn-info waves-effect waves-light" >Details</a></td>
                    <td><button class="btn btn-success waves-effect waves-light" onclick="viewer.zoomTo(@if(task.Incident.Asset == null){@task.Incident.SpaceId} else {@task.Incident.AssetId})">Zoom To</button></td>
                </tr>
            }
        </tbody>
    </table>
</div>

<script>
    $(document).ready(function () {
        $('#AgentsTable').DataTable(
            {
                "columnDefs": [
                    {
                        "searchable": false, "targets": [2, 3],
                    }
                ],
                "autoWidth": false,
                "columns": [
                    { "width": "15%" },
                    { "width": "45%" },
                    { "width": "20%" },
                    { "width": "20%" },
                ],
                "oLanguage": {
                    "sSearch": "<english>Search :</english><arabic class='d-none'>بحث :</arabic>",
                    "sEmptyTable": "<english>No data available in table</english><arabic class='d-none'>لا توجد بيانات متوفرة في الجدول</arabic>",
                    "oPaginate": {
                        "sNext": "<english>Next</english><arabic class='d-none'>التالي</arabic>",
                        "sPrevious": "<english>Previous</english><arabic class='d-none'>السابق</arabic>"
                    },
                    "sInfo": "<english>Showing _START_ to _END_ of _TOTAL_ entries</english><arabic class='d-none'>عرض _START_ إلى _END_ من أصل _TOTAL_ بيانات</arabic>",
                    "sInfoEmpty": "<english>No entries to show</english><arabic class='d-none'>لا يوجد بيانات للعرض</arabic>",
                    "sInfoFiltered": "<english>(filtering from _MAX_ entries)</english><arabic class='d-none'>(مصفى من _MAX_ البيانات)</arabic>",
                    "sLengthMenu": "<english>Show</english><arabic class='d-none'>إظهار</arabic> _MENU_ <english>entries</english><arabic class='d-none'>بيانات</arabic>"
                },
                "drawCallback": function( settings ) {
                    if (localStorage.getItem('language') == "arabic")
                    {
                        var english = $('english');
                        var arabic = $('arabic');
                        $(english).each(function () {
                            $(this).addClass("d-none")
                        });
                        $(arabic).each(function () {
                            $(this).removeClass("d-none")
                        });
                    }
                },
            }
        );
    } );        

    $(document).ready(function () {
    $('#ItemsTable').DataTable(
        {
            "columnDefs": [
                    { "searchable": false, "targets": [4, 5], },
                    { "targets": [0], "visible": false, }
            ],
            dom: '<"mb-2"B>lfrtip',
            buttons : [
                {
                    text: "<english>Show All</english><arabic class='d-none'>عرض الكل</arabic>",
                    action: function ( e, dt, node, config ) {
                            ShowAllData();
                    },
                    className: 'btn btn-primary waves-effect waves-light mr-1'
                },
                {
      	            extend: 'excelHtml5',
                    text: '<english>Save as excel sheet</english><arabic class="d-none">حفظ كملف اكسل</arabic>',
                    exportOptions: {
                        columns: [ 0, 1, 2 , 3],
                        format: {
                            header: function(text, index, node) {
                                return localStorage.getItem('language') == "english" ? text.replace(/[\u0621-\u064A]/g, '').replace( /<.*?>/g, '') : text.replace(/[A-Za-z]/g, '').replace( /<.*?>/g, '');
                            }
                        }
                    },
                    className: 'btn btn-primary waves-effect waves-light mr-1'
                }
            ],
            "search": {regex: true},
            "autoWidth": false,
            "columns": [
                { "width": "0%" },
                { "width": "15%" },
                { "width": "25%" },
                { "width": "20%" },
                { "width": "20%" },
                { "width": "20%" },
            ],
            "oLanguage": {
                "sSearch": "<english>Search :</english><arabic class='d-none'>بحث :</arabic>",
                "sEmptyTable": "<english>No data available in table</english><arabic class='d-none'>لا توجد بيانات متوفرة في الجدول</arabic>",
                "oPaginate": {
                    "sNext": "<english>Next</english><arabic class='d-none'>التالي</arabic>",
                    "sPrevious": "<english>Previous</english><arabic class='d-none'>السابق</arabic>"
                },
                "sInfo": "<english>Showing _START_ to _END_ of _TOTAL_ entries</english><arabic class='d-none'>عرض _START_ إلى _END_ من أصل _TOTAL_ بيانات</arabic>",
                "sInfoEmpty": "<english>No entries to show</english><arabic class='d-none'>لا يوجد بيانات للعرض</arabic>",
                "sInfoFiltered": "<english>(filtering from _MAX_ entries)</english><arabic class='d-none'>(مصفى من _MAX_ البيانات)</arabic>",
                "sLengthMenu": "<english>Show</english><arabic class='d-none'>إظهار</arabic> _MENU_ <english>entries</english><arabic class='d-none'>بيانات</arabic>"
            },
            "drawCallback": function( settings ) {
                if (localStorage.getItem('language') == "arabic")
                {
                    var english = $('english');
                    var arabic = $('arabic');
                    $(english).each(function () {
                        $(this).addClass("d-none")
                    });
                    $(arabic).each(function () {
                        $(this).removeClass("d-none")
                    });
                }
            },
            stateSave: true
        }    
    );
    } );
    var ItemsTableHeading = $("#BottomTableHeading")[0]
    
    function ShowAllData() {
        var itemsTable = $("#ItemsTable").DataTable()
        itemsTable.column(0).search("").draw();
        listOfSevere = listOfSevere2;
        listOfHigh = listOfHigh2;
        listOfMedium = listOfMedium2;
        listOfLow = listOfLow2;
        var Language = localStorage.getItem('language')
        if (Language == "english") {
            ItemsTableHeading.innerHTML = "<english>All Work Orders</english><arabic class='d-none'>كل المهام</arabic>"
        }
        else {
            ItemsTableHeading.innerHTML = "<english class='d-none'>All Work Orders</english><arabic>كل المهام</arabic>"
        }
    }
    
    var AgentsDic = {
        @foreach(var Agent in ViewBag.Agents)
        {
            @Agent.Id@::@Html.Raw(Json.Serialize(Agent.FirstName + " " + Agent.LastName)),
        }
    }

    function ChangeData(Id) {
        var itemsTable = $("#ItemsTable").DataTable()
        itemsTable.column(0).search(Id).draw();
        listOfSevere = AgentItems[Id][0];
        listOfHigh = AgentItems[Id][1];
        listOfMedium = AgentItems[Id][2];
        listOfLow = AgentItems[Id][3];
        var Language = localStorage.getItem('language')
        if (Language == "english") {
            ItemsTableHeading.innerHTML = "<english>Work Orders for Agent " + AgentsDic[Id] + "</english><arabic class='d-none'>مهام العامل " + AgentsDic[Id] + "</arabic>"
        }
        else {
            ItemsTableHeading.innerHTML = "<english class='d-none'>Work Orders for Agent " + AgentsDic[Id] + "</english><arabic>مهام العامل " + AgentsDic[Id] + "</arabic>"
        }
    }

</script>

