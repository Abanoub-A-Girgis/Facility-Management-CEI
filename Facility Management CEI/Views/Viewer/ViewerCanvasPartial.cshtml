<canvas id="viewer" height="700" style="width: 100%;
                                   object-fit: contain;"></canvas>

        <div class="shadow-lg p-3 mb-5 bg-white rounded" style="width: 270px; position: absolute;
                                                                top: 300px;
                                                                right: 8px;
                                                                z-index:5"">
            <div class="font-weight-bold mb-2 text-center">
                <english>Toggle Highlights</english>
                <arabic class="d-none">الإضاءات</arabic>
            </div>

            <div id="ToggleHighlightDiv">
                <div class="custom-control custom-switch mb-1">
                    <input type="checkbox" class="custom-control-input" id="Switch1" onchange="ToggleHighLightItems()" autocomplete="off">
                    <label class="custom-control-label" for="Switch1">
                        <english>Items</english>
                        <arabic class="d-none">العناصر</arabic>
                        </label>
                </div>
                <div class="custom-control custom-switch mb-1">
                    <input type="checkbox" class="custom-control-input custom-control-input-light" id="Switch2" onchange="ToggleHighLightSevere()" checked autocomplete="off">
                    <label class="custom-control-label custom-control-label-light" for="Switch2">
                        <english>Severe</english>
                        <arabic class="d-none">شديدة</arabic>
                        </label>
                </div>
                <div class="custom-control custom-switch mb-1">
                    <input type="checkbox" class="custom-control-input custom-control-input-light" id="Switch3" onchange="ToggleHighLightHigh()" checked autocomplete="off">
                    <label class="custom-control-label custom-control-label-light" for="Switch3">
                        <english>High</english>
                        <arabic class="d-none">عالي</arabic>
                        </label>
                </div>
                <div class="custom-control custom-switch mb-1">
                    <input type="checkbox" class="custom-control-input custom-control-input-light" id="Switch4" onchange="ToggleHighLightMedium()" checked autocomplete="off">
                    <label class="custom-control-label custom-control-label-light" for="Switch4">
                        <english>Medium</english>
                        <arabic class="d-none">متوسط</arabic>
                    </label>
                </div>
                <div class="custom-control custom-switch mb-1">
                    <input type="checkbox" class="custom-control-input custom-control-input-light" id="Switch5" onchange="ToggleHighLightLow()" checked autocomplete="off">
                    <label class="custom-control-label custom-control-label-light" for="Switch5">
                        <english>Low</english>
                        <arabic class="d-none">قليل</arabic>
                    </label>
                </div>
                <div class="custom-control custom-switch mb-1">
                    <input type="checkbox" class="custom-control-input custom-control-input-light" id="Switch13" onchange="ToggleHighLightRooms()" autocomplete="off">
                    <label class="custom-control-label custom-control-label-light" for="Switch13">
                        <english>Spaces</english>
                        <arabic class="d-none">فراغات</arabic>
                    </label>
                </div>
            </div>
            <div class="text-center SliderDiv" id="ToggleHighlightArrowDiv">
                <i class="fas fa-angle-double-up" id="ToggleHighlightDivArrow"></i>
            </div>

        </div>

         @await Html.PartialAsync("~/Views/Viewer/ViewerToggleFloorsPartial.cshtml")

        <div style="position: absolute;
                    top: 8px;
                    right: 50%;
                    z-index:5" id="fpsDiv"></div>
        <script type="text/javascript">
            var viewer = new xViewer('viewer');
            //viewer.load('../data/SampleHouse.wexbim');
            //viewer.load('@System.Configuration.ConfigurationManager.AppSettings["wexBIMFullPath"]');
            var navCube = new xNavigationCube();
            navCube.ratio = .1;
            viewer.addPlugin(navCube);
            viewer.start();
            viewer.defineStyle(0, [255,0,0,255])
            viewer.defineStyle(1, [255,160,16,255])
            viewer.defineStyle(2, [255,224,32,255])
            viewer.defineStyle(3, [0,255,0,255])
        </script>

        @*<script> 
                viewer.on('pick', function (args) {
                    var id = args.id;
                    viewer.setCameraTarget(id);
                    pickedId = id;
                });
        </script>*@

        <script>
                viewer.on('fps', function (fps) {
                    var fpsDiv = document.getElementById('fpsDiv');
                    if (fpsDiv) {
                        fpsDiv.innerHTML = "FPS: " + fps;
                    }
                });
        </script>

        <div>
            <div class="text-center font-weight-bold m-2" id="productId"></div>
        </div>

@*        <script>
            // Arrays to hold the item id's depending on their priority
            var listOfSevere = [];
            var listOfHigh = [];
            var listOfMedium = [];
            var listOfLow = [];
            @foreach (var i in Model.Severe)
            {
                @:listOfSevere.push(@i);
            }
            @foreach (var i in Model.High)
            {
                @:listOfHigh.push(@i);
            }
            @foreach (var i in Model.Medium)
            {
                @:listOfMedium.push(@i);
            }
            @foreach (var i in Model.Low)
            {
                @:listOfLow.push(@i);
            }

            
            var animateBool = true;
            setInterval(animateObjects, 1000);
            function animateObjects() {
                if (animateBool) {
                    viewer.setStyle(0, listOfSevere);
                    viewer.setStyle(1, listOfHigh);
                    viewer.setStyle(2, listOfMedium);
                    viewer.setStyle(3, listOfLow);
                    animateBool = false;
                }
                else {
                    viewer.resetStyles()
                    animateBool = true;
                }
            }
        </script>*@

        <div class="text-center">
@*            <select id="cmbHide">
                <option value="noAction">No action</option>
                <option value="hideProduct">Hide product</option>
                <option value="hideType">Hide type</option>
                <option value="highlight">Highlight</option>
            </select>*@
            <button class="btn btn-primary waves-effect waves-light" onclick="HideProduct()">
                <english>Hide Product</english>
                <arabic class="d-none">إخفاء عنصر</arabic>
            </button>
            <button class="btn btn-primary waves-effect waves-light" onclick="HideType()">
                <english>Hide Type</english>
                <arabic class="d-none">إخفاء الحالة</arabic>
            </button>
            <button class="btn btn-primary waves-effect waves-light" onclick="Highlight()">
                <english>Select Product</english>
                <arabic class="d-none">اختر  عنصر</arabic>
            </button>
            <button class="btn btn-primary waves-effect waves-light" onclick="viewer.zoomTo()">
                <english>Reset Zoom</english>
                <arabic class="d-none">ارجاع التكبير</arabic>
            </button>
            <button class="btn btn-primary waves-effect waves-light" onclick="ResetAll()">
                <english>Reset all</english>
                <arabic class="d-none">ارجاع الكل</arabic>
            </button>
            <script type="text/javascript">

                var timer = 0;
                var highlightedId;
                var option;
                
                function HideProduct() {
                    option = "hideProduct";
                }
                
                function HideType() {
                    option = "hideType";
                }

                function Highlight() {
                    option = "highlight";
                }

                function ResetAll() {
                    if (viewer) {
                        viewer.resetStates();
                        document.getElementById('Switch6').checked = true;
                        document.getElementById('Switch7').checked = true;
                        document.getElementById('Switch8').checked = true;
                        document.getElementById('Switch9').checked = true;
                        document.getElementById('Switch10').checked = true;
                        document.getElementById('Switch11').checked = true;
                        document.getElementById('Switch12').checked = true;
                        ShowingFloors = new Array(FloorNames.length).fill(true);
                    }
                    var div = document.getElementById('productId');
                    if (div) {
                        div.innerHTML = "";
                    }
                }
                
                viewer.on('pick', function (args) {
                    var id = args.id;
                    viewer.setCameraTarget(id);
                    pickedId = id;
                    document.getElementById('hiddenId').value = id;

                    //var cmb = document.getElementById('cmbHide');
                    //var option = cmb.value;
                    switch (option) {
                        case 'hideProduct':
                            viewer.setState(xState.HIDDEN, [args.id]);
                            if (args.id == highlightedId)
                                {
                                    highlightedId = null;
                                }
                            break;
                        case 'hideType':
                            var type = viewer.getProductType(args.id);
                            viewer.setState(xState.HIDDEN, type);
                            if (type == viewer.getProductType(highlightedId))
                            {
                                highlightedId = null;
                            }
                            break;
                        case 'highlight':
                            //viewer.resetStates();
                            viewer.setState(xState.UNDEFINED, [highlightedId]);
                            viewer.setState(xState.HIGHLIGHTED, [args.id]);
                            var div = document.getElementById('productId');
                            if (div) {
                                div.innerHTML = "Selected Asset Id = " + id;
                            }
                            highlightedId = id;
                            break;
                        default:
                            break;
                    }

                    var time = (new Date()).getTime();
                    if (time - timer < 200)
                        viewer.zoomTo(id);
                    timer = time;

                });
            </script>
            <input name="hiddenId" type="hidden" id="hiddenId" />
        </div>

<script>
    function CreateCanvas() {
        var htmlContent = document.createElement('canvas');
        htmlContent.id = "viewer";
        htmlContent.width = "500";
        htmlContent.height = "300";
        document.getElementById("viewer").remove();
        var ParentElement = document.getElementById("content");
        ParentElement.insertBefore(htmlContent, ParentElement.firstChild);
        viewer = new xViewer('viewer');
        navCube = new xNavigationCube();
        navCube.ratio = .1;
        viewer.addPlugin(navCube);
        viewer.start();
        viewer.defineStyle(0, [255,0,0,255])
        viewer.defineStyle(1, [255,160,16,255])
        viewer.defineStyle(2, [255,224,32,255])
        viewer.defineStyle(3, [0,255,0,255])
    }

    var AgentItems = {
        @foreach(var Items in Model)
        {
            @Items.Key@:: [@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Items.Value.Severe)), @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Items.Value.High)), @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Items.Value.Medium)), @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Items.Value.Low)), @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Items.Value.Rooms))],
        }
    }

    var listOfSevere = [];
    var listOfHigh = [];
    var listOfMedium = [];
    var listOfLow = [];
    var listOfRooms = [];

    $.each(AgentItems, function(key, value) {
        listOfSevere = listOfSevere.concat(value[0]);
        listOfHigh = listOfHigh.concat(value[1]);
        listOfMedium = listOfMedium.concat(value[2]);
        listOfLow = listOfLow.concat(value[3]);
        listOfRooms = listOfRooms.concat(value[4]);
    })
        
    var listOfSevere2 = listOfSevere;
    var listOfHigh2 = listOfHigh;
    var listOfMedium2 = listOfMedium;
    var listOfLow2 = listOfLow;
    var listOfRooms2 = listOfRooms;

        
    var animateSevereBool = true;
    function ToggleHighLightSevere() {                    
        animateSevereBool ? animateSevereBool = false : animateSevereBool = true;
    }
        
    var animateHighBool = true;
    function ToggleHighLightHigh() {
        animateHighBool ? animateHighBool = false : animateHighBool = true;
    }

    var animateMediumBool = true;
    function ToggleHighLightMedium() {
        animateMediumBool ? animateMediumBool = false : animateMediumBool = true;
    }

    var animateLowBool = true;
    function ToggleHighLightLow() {
        animateLowBool ? animateLowBool = false : animateLowBool = true;
    }

    var animateRoomsBool = false;
    function ToggleHighLightRooms() {
        animateRoomsBool ? animateRoomsBool = false : animateRoomsBool = true;
    }
        
    var HighLightItemsBool = false;
    var animation;
    function ToggleHighLightItems() {
        if (HighLightItemsBool) {
            clearInterval(animation);
            viewer.setState(xState.HIDDEN, listOfRooms)
            viewer.resetStyles();
            HighLightItemsBool = false;
        }
        else {
            var animateBool = true;
            animation = setInterval(animateObjects, 500);
            function animateObjects() {
                if (animateBool) {
                    if(animateSevereBool) {
                        viewer.setStyle(0, listOfSevere);
                    }
                    if(animateHighBool) {
                        viewer.setStyle(1, listOfHigh);
                    }
                    if (animateMediumBool) {
                        viewer.setStyle(2, listOfMedium);
                    }
                    if (animateLowBool) {
                        viewer.setStyle(3, listOfLow);
                    }
                    if(animateRoomsBool) {
                        viewer.setState(xState.HIGHLIGHTED, listOfRooms)
                    }
                    animateBool = false;
                }
                else {
                    viewer.resetStyles()
                    viewer.setState(xState.HIDDEN, listOfRooms)
                    animateBool = true;
                }
                HighLightItemsBool = true;
            }
        }  
    }

</script>

