
@{
    ViewBag.Title = "Viewer";
}
@using System.Configuration
@using API.Models
@model Dictionary<int, Facility_Management_CEI.Controllers.ViewerParameter>
<h1 class="text-center text-uppercase font-weight-bold mb-5" style="font-size: 2.8rem;">Task Viewer Dashboard</h1>

<head>
    <title>View as Agent</title>
    <script src="../Scripts/XBIM/xbim-viewer.debug.bundle.js"></script>
    <script src="../Scripts/XBIM/NavigationCube/xbim-navigation-cube-shaders.debug.js"></script>
    <script src="../Scripts/XBIM/NavigationCube/xbim-navigation-cube.debug.js"></script>
    <script src="../Scripts/XBIM/NavigationCube/xbim-navigation-cube-textures.debug.js"></script>
    <script src="../Scripts/XBIM/NavigationHome/xbim-navigation-home-textures.debug.js"></script>
    <script src="../Scripts/XBIM/NavigationHome/xbim-navigation-home.debug.js"></script>
    
    <script src="~/assets/libs/datatables.net/js/jquery.dataTables.min.js"></script>
    <script type="text/javascript" src="https://cdn.datatables.net/1.10.12/js/jquery.dataTables.min.js"></script>
    <script type="text/javascript" src="https://cdn.datatables.net/buttons/1.2.2/js/dataTables.buttons.min.js"></script>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jszip/2.5.0/jszip.min.js"></script>
    <script type="text/javascript" src="https://cdn.rawgit.com/bpampuch/pdfmake/0.1.18/build/pdfmake.min.js"></script>
    <script type="text/javascript" src="https://cdn.rawgit.com/bpampuch/pdfmake/0.1.18/build/vfs_fonts.js"></script>
    <script type="text/javascript" src="https://cdn.datatables.net/buttons/1.2.2/js/buttons.html5.min.js"></script>
    
    <link href="~/assets/libs/datatables.net/css/jquery.dataTables.css" rel="stylesheet" type="text/css" >
    <link href="~/assets/libs/datatables.net/css/dataTables.bootstrap.min.css" rel="stylesheet" type="text/css" >

    <style>
        .table-hover > tbody > tr:hover {
            background-color: #D2D2D2;
        }
        thead tr{
            background-color: #343a40;
            box-shadow: 0px -2px #343a40;
            color: white;
        }
        .custom-control-input-light:focus~.custom-control-label-light::before {
          border-color: #7CB9E8 !important;
        }

        .custom-control-input-light:checked~.custom-control-label-light::before {
          border-color: #7CB9E8 !important;
          background-color: #7CB9E8 !important;
        }

        .custom-control-input-light:active~.custom-control-label-light::before {
          background-color: #7CB9E8 !important;
          border-color: #7CB9E8 !important;
        }

        .custom-control-input-light:focus:not(:checked)~.custom-control-label-light::before {
          border-color: #7CB9E8 !important;
        }
        
        table.dataTable thead>tr>th.sorting:before, table.dataTable thead>tr>th.sorting:after, table.dataTable thead>tr>th.sorting_asc:before, table.dataTable thead>tr>th.sorting_asc:after, table.dataTable thead>tr>th.sorting_desc:before, table.dataTable thead>tr>th.sorting_desc:after, table.dataTable thead>tr>th.sorting_asc_disabled:before, table.dataTable thead>tr>th.sorting_asc_disabled:after, table.dataTable thead>tr>th.sorting_desc_disabled:before, table.dataTable thead>tr>th.sorting_desc_disabled:after, table.dataTable thead>tr>td.sorting:before, table.dataTable thead>tr>td.sorting:after, table.dataTable thead>tr>td.sorting_asc:before, table.dataTable thead>tr>td.sorting_asc:after, table.dataTable thead>tr>td.sorting_desc:before, table.dataTable thead>tr>td.sorting_desc:after, table.dataTable thead>tr>td.sorting_asc_disabled:before, table.dataTable thead>tr>td.sorting_asc_disabled:after, table.dataTable thead>tr>td.sorting_desc_disabled:before, table.dataTable thead>tr>td.sorting_desc_disabled:after {
                font-size: 1.8em;
        }
    </style>
</head>
<body>
    <div class="row">
        <div class="col-5">
            <h3 class="text-center font-weight-bold">Subordinates</h3>
            <div>
                <div class="shadow-sm p-3 mb-4 bg-white rounded tab-pane" id="AgentsDiv">
                    <table id="AgentsTable" class="w-100 table table-striped table-hover mb-3">
                        <thead>
                            <tr class="sticky-top">
                                <th>User ID</th>
                                <th>Name</th>
                                <th>User Details</th>
                                <th>Load Tasks</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var Agent in ViewBag.Agents)
                            {
                                <tr>
                                    <th>@Agent.Id</th>
                                    <td>@Agent.FirstName @Agent.LastName</td>
                                    <td><button class="btn btn-info waves-effect waves-light">User Details</button></td>
                                    <td><button class="btn btn-success waves-effect waves-light" onclick="ChangeData(@Agent.Id)">Show Tasks</button></td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
            <h3 class="text-center font-weight-bold" id="BottomTableHeading">All Tasks</h3>
            <div class="shadow-sm p-3 mb-4 bg-white rounded tab-pane" id="tab-table2">
                <table id="ItemsTable" class="w-100 table table-striped table-hover">
                    <thead>
                        <tr class="sticky-top">
                            <th>Agent ID</th>
                            <th>Task ID</th>
                            <th>Asset Name</th>
                            <th>Details</th>
                            <th>Zoom To</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var task in ViewBag.Tasks)
                        {
                            <tr>
                                <th>@task.AssignedToId</th>
                                <th>@task.Id</th>
                                <td>@task.Incident.Asset.Name</td>
                                <td><button class="btn btn-info waves-effect waves-light">Details</button></td>
                                <td><button class="btn btn-success waves-effect waves-light" onclick="viewer.zoomTo(@task.Incident.AssetId)">Zoom To</button></td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    <div class="col-7">
        <canvas id="viewer" height="650" style="width: 100%;
                                   object-fit: contain;"></canvas>
        <div class="shadow-lg p-3 mb-5 bg-white rounded" style="width: 150px; position: absolute;
                                                                top: 8px;
                                                                left: 20px;
                                                                z-index:5"">
            <div class="font-weight-bold mb-2 text-center">Toggle Highlights</div>
            @*<button class="btn btn-primary" onclick="ToggleHighLightItems()">Toggle Highlight Items</button>
            <button class="btn btn-primary" onclick="ToggleHighLightSevere()">Toggle Highlight Severe</button>
            <button class="btn btn-primary" onclick="ToggleHighLightHigh()">Toggle Highlight High</button>
            <button class="btn btn-primary" onclick="ToggleHighLightMedium()">Toggle Highlight Medium</button>
            <button class="btn btn-primary" onclick="ToggleHighLightLow()">Toggle Highlight Low</button>*@
            <div class="custom-control custom-switch mb-1">
                <input type="checkbox" class="custom-control-input" id="Switch1" onchange="ToggleHighLightItems()">
                <label class="custom-control-label" for="Switch1">Items</label>
            </div>
            <div class="custom-control custom-switch mb-1">
                <input type="checkbox" class="custom-control-input custom-control-input-light" id="Switch2" onchange="ToggleHighLightSevere()" checked>
                <label class="custom-control-label custom-control-label-light" for="Switch2">Severe</label>
            </div>
            <div class="custom-control custom-switch mb-1">
                <input type="checkbox" class="custom-control-input custom-control-input-light" id="Switch3" onchange="ToggleHighLightHigh()" checked>
                <label class="custom-control-label custom-control-label-light" for="Switch3">High</label>
            </div>
            <div class="custom-control custom-switch mb-1">
                <input type="checkbox" class="custom-control-input custom-control-input-light" id="Switch4" onchange="ToggleHighLightMedium()" checked>
                <label class="custom-control-label custom-control-label-light" for="Switch4">Medium</label>
            </div>
            <div class="custom-control custom-switch mb-1">
                <input type="checkbox" class="custom-control-input custom-control-input-light" id="Switch5" onchange="ToggleHighLightLow()" checked>
                <label class="custom-control-label custom-control-label-light" for="Switch5">Low</label>
            </div>

        </div>
        <div style="position: absolute;
                    top: 8px;
                    right: 16px;
                    z-index:5" id="overlayDiv"></div>
        <script type="text/javascript">
            var viewer = new xViewer('viewer');
            viewer.load('../data/SampleHouse.wexbim');
            //viewer.load('@System.Configuration.ConfigurationManager.AppSettings["wexBIMFullPath"]');
            var navCube = new xNavigationCube();
            navCube.ratio = .1;
            viewer.addPlugin(navCube);
            viewer.start();
            viewer.defineStyle(0, [255,0,0,255])
            viewer.defineStyle(1, [255,160,16,255])
            viewer.defineStyle(2, [255,224,32,255])
            viewer.defineStyle(3, [0,255,0,255])
        </script>

        @*<script> 
                viewer.on('pick', function (args) {
                    var id = args.id;
                    viewer.setCameraTarget(id);
                    pickedId = id;
                });
        </script>*@

        <script>
                viewer.on('fps', function (fps) {
                    var overlayDiv = document.getElementById('overlayDiv');
                    if (overlayDiv) {
                        overlayDiv.innerHTML = "FPS: " + fps;
                    }
                });
        </script>

        <div>
            <div class="text-center font-weight-bold m-2" id="productId"></div>
        </div>

@*        <script>
            // Arrays to hold the item id's depending on their priority
            var listOfSevere = [];
            var listOfHigh = [];
            var listOfMedium = [];
            var listOfLow = [];
            @foreach (var i in Model.Severe)
            {
                @:listOfSevere.push(@i);
            }
            @foreach (var i in Model.High)
            {
                @:listOfHigh.push(@i);
            }
            @foreach (var i in Model.Medium)
            {
                @:listOfMedium.push(@i);
            }
            @foreach (var i in Model.Low)
            {
                @:listOfLow.push(@i);
            }

            
            var animateBool = true;
            setInterval(animateObjects, 1000);
            function animateObjects() {
                if (animateBool) {
                    viewer.setStyle(0, listOfSevere);
                    viewer.setStyle(1, listOfHigh);
                    viewer.setStyle(2, listOfMedium);
                    viewer.setStyle(3, listOfLow);
                    animateBool = false;
                }
                else {
                    viewer.resetStyles()
                    animateBool = true;
                }
            }
        </script>*@

        <div class="text-center">
@*            <select id="cmbHide">
                <option value="noAction">No action</option>
                <option value="hideProduct">Hide product</option>
                <option value="hideType">Hide type</option>
                <option value="highlight">Highlight</option>
            </select>*@
            <button class="btn btn-primary waves-effect waves-light" onclick="HideProduct()">Hide Product</button>
            <button class="btn btn-primary waves-effect waves-light" onclick="HideType()">Hide Type</button>
            <button class="btn btn-primary waves-effect waves-light" onclick="Highlight()">Select Product</button>
            <button class="btn btn-primary waves-effect waves-light" onclick="ResetAll()">Reset all</button>
            <script type="text/javascript">

                var timer = 0;
                
                var option;
                
                function HideProduct() {
                    option = "hideProduct";
                }
                
                function HideType() {
                    option = "hideType";
                }

                function Highlight() {
                    option = "highlight";
                }

                function ResetAll() {
                    if (viewer) {
                        viewer.resetStates();
                    }
                    var div = document.getElementById('productId');
                    if (div) {
                        div.innerHTML = "";
                    }
                }
                
                viewer.on('pick', function (args) {
                    var id = args.id;
                    viewer.setCameraTarget(id);
                    pickedId = id;
                    document.getElementById('hiddenId').value = id;

                    //var cmb = document.getElementById('cmbHide');
                    //var option = cmb.value;
                    switch (option) {
                        case 'hideProduct':
                            viewer.setState(xState.HIDDEN, [args.id]);
                            break;
                        case 'hideType':
                            var type = viewer.getProductType(args.id);
                            viewer.setState(xState.HIDDEN, type);
                            break;
                        case 'highlight':
                            viewer.resetStates();
                            viewer.setState(xState.HIGHLIGHTED, [args.id]);
                            var div = document.getElementById('productId');
                            if (div) {
                                div.innerHTML = "Selected Asset Id = " + id;
                            }
                            break;
                        default:
                            break;
                    }

                    var time = (new Date()).getTime();
                    if (time - timer < 200)
                        viewer.zoomTo(id);
                    timer = time;

                });
            </script>
            <input name="hiddenId" type="hidden" id="hiddenId" />
        </div>
    </div>
    </div>


    <script>

        function CreateCanvas() {
            var htmlContent = document.createElement('canvas');
            htmlContent.id = "viewer";
            htmlContent.width = "500";
            htmlContent.height = "300";
            document.getElementById("viewer").remove();
            var ParentElement = document.getElementById("content");
            ParentElement.insertBefore(htmlContent, ParentElement.firstChild);
            viewer = new xViewer('viewer');
            navCube = new xNavigationCube();
            navCube.ratio = .1;
            viewer.addPlugin(navCube);
            viewer.start();
            viewer.defineStyle(0, [255,0,0,255])
            viewer.defineStyle(1, [255,160,16,255])
            viewer.defineStyle(2, [255,224,32,255])
            viewer.defineStyle(3, [0,255,0,255])
        }
        
        var AgentItems = {
            @foreach(var Items in Model)
            {
                @Items.Key@:: [@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Items.Value.Severe)), @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Items.Value.High)), @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Items.Value.Medium)), @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Items.Value.Low))],
            }
        }

        var listOfSevere = [];
        var listOfHigh = [];
        var listOfMedium = [];
        var listOfLow = [];

        $.each(AgentItems, function(key, value) {
            listOfSevere = listOfSevere.concat(value[0]);
            listOfHigh = listOfHigh.concat(value[1]);
            listOfMedium = listOfMedium.concat(value[2]);
            listOfLow = listOfLow.concat(value[3]);
        })
        
        var listOfSevere2 = listOfSevere;
        var listOfHigh2 = listOfHigh;
        var listOfMedium2 = listOfMedium;
        var listOfLow2 = listOfLow;

        
        var animateSevereBool = true;
        function ToggleHighLightSevere() {                    
            animateSevereBool ? animateSevereBool = false : animateSevereBool = true;
        }
        
        var animateHighBool = true;
        function ToggleHighLightHigh() {
            animateHighBool ? animateHighBool = false : animateHighBool = true;
        }

        var animateMediumBool = true;
        function ToggleHighLightMedium() {
            animateMediumBool ? animateMediumBool = false : animateMediumBool = true;
        }

        var animateLowBool = true;
        function ToggleHighLightLow() {
            animateLowBool ? animateLowBool = false : animateLowBool = true;
        }
        
        var HighLightItemsBool = false;
        var animation;
        function ToggleHighLightItems() {
            if (HighLightItemsBool) {
                clearInterval(animation);
                viewer.resetStyles();
                HighLightItemsBool = false;
            }
            else {
                var animateBool = true;
                animation = setInterval(animateObjects, 1000);
                function animateObjects() {
                    if (animateBool) {
                        if(animateSevereBool) {
                            viewer.setStyle(0, listOfSevere);
                        }
                        if(animateHighBool) {
                            viewer.setStyle(1, listOfHigh);
                        }
                        if (animateMediumBool) {
                            viewer.setStyle(2, listOfMedium);
                        }
                        if (animateLowBool) {
                            viewer.setStyle(3, listOfLow);
                        }
                        animateBool = false;
                    }
                    else {
                        viewer.resetStyles()
                        animateBool = true;
                    }
                    HighLightItemsBool = true;
                }
            }  
        }
        
        $(document).ready(function () {
            $('#AgentsTable').DataTable(
                {
                    "columnDefs": [
                        {
                            "searchable": false, "targets": [2, 3],
                        }
                    ],
                    "autoWidth": false,
                    "columns": [
                        { "width": "15%" },
                        { "width": "45%" },
                        { "width": "20%" },
                        { "width": "20%" },
                    ]
                }
            );
        } );        

        $(document).ready(function () {
            $('#ItemsTable').DataTable(
                {
                    "columnDefs": [
                        { "searchable": false, "targets": [3,4] }
                    ],
                    dom: '<"mb-2"B>lfrtip',
                    buttons : [
                        {
                            text: "Show All",
                            action: function ( e, dt, node, config ) {
                                    ShowAllData();
                            },
                            className: 'btn btn-primary waves-effect waves-light mr-1'
                        },
                        {
      	                    extend: 'excelHtml5',
                            text: 'Save as excel sheet',
                            exportOptions: {
                                columns: [ 0, 1 , 2]
                            },
                            className: 'btn btn-primary waves-effect waves-light mr-1'
                        }
                    ],
                    "search": {regex: true},
                    "autoWidth": false,
                    "columns": [
                        { "width": "15%" },
                        { "width": "15%" },
                        { "width": "30%" },
                        { "width": "20%" },
                        { "width": "20%" },
                    ]
                }    
            );
        } );
        
        function ShowAllData() {
            var itemsTable = $("#ItemsTable").DataTable();
            itemsTable.column(0).search("").draw();
            listOfSevere = listOfSevere2;
            listOfHigh = listOfHigh2;
            listOfMedium = listOfMedium2;
            listOfLow = listOfLow2;
        }
        
        function ChangeData(Id) {
            var itemsTable = $("#ItemsTable").DataTable()
            itemsTable.column(0).search(Id).draw();
            listOfSevere = AgentItems[Id][0];
            listOfHigh = AgentItems[Id][1];
            listOfMedium = AgentItems[Id][2];
            listOfLow = AgentItems[Id][3];
        }
        
    </script>

</body>